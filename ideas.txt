exactmath class with just add, subtract, multiply, and divide; separate package and module for extended functionality


range function to produce arbitrarily large iterables/iterators range( "abc", "xyz" ) = ? -- how to combine characters or should it be string-compliant
mapping over an infinite set -
        return a new iterator that applies the mapping function to each value before it yields

        move tests and configure jest for monorepo

        JSDoc, package.html

        "Why?" - document the reasoning behind each function somewhere:
        example: "string" === someVariable when I meant "string" === tyupeof someVariable
        minifiers and quoted string literals?
        memory usage of string literals?

        look for an eliminate further redundancies

        dispatch "trace" events from FunctionUtils (and some selected functions)

LoggingUtils
    SimpleLogger
    AsyncLogger
    EncryptingLogger
    make them composable

    use notion of "appenders" to handle writing to file, console, database, remote endpoint, or somewhere else


MathUtils - distributions; advanced mathematics
WorkerUtils
ServiceWorkerUtils, caching strategies
.valueOf Symbol [Symbol.toPrimitive]
Symbol.species
ObjectFunctor
breadth-first iterators
depth-first iterators
functional programming constructs (birds?)
Page.Scheduler port
pending promises
pending events / event interceptor
table header nonscrolling
NumberUtils, fractions, overflows
asyncLoad modules
Lerna to publish as separate packages or TurboRepo?

JsDoc

can I rename my repository?

how to scope to @toolbocks?  or ToolBox?  module paths like toolbox/events?

uglify
parsers
build
base64 validation (reject executable files) -- apparently no one knows a sure way to do this and all rely on mime-types and file extensions
lazy iterators
short-circuit iterators

base64 for browser - Buffer replacement